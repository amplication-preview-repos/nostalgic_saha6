/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, FeedbackType as PrismaFeedbackType } from "@prisma/client";

export class FeedbackTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FeedbackTypeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.feedbackType.count(args);
  }

  async feedbackTypes(
    args: Prisma.FeedbackTypeFindManyArgs
  ): Promise<PrismaFeedbackType[]> {
    return this.prisma.feedbackType.findMany(args);
  }
  async feedbackType(
    args: Prisma.FeedbackTypeFindUniqueArgs
  ): Promise<PrismaFeedbackType | null> {
    return this.prisma.feedbackType.findUnique(args);
  }
  async createFeedbackType(
    args: Prisma.FeedbackTypeCreateArgs
  ): Promise<PrismaFeedbackType> {
    return this.prisma.feedbackType.create(args);
  }
  async updateFeedbackType(
    args: Prisma.FeedbackTypeUpdateArgs
  ): Promise<PrismaFeedbackType> {
    return this.prisma.feedbackType.update(args);
  }
  async deleteFeedbackType(
    args: Prisma.FeedbackTypeDeleteArgs
  ): Promise<PrismaFeedbackType> {
    return this.prisma.feedbackType.delete(args);
  }
}
