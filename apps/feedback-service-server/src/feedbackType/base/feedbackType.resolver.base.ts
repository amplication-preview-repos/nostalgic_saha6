/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { FeedbackType } from "./FeedbackType";
import { FeedbackTypeCountArgs } from "./FeedbackTypeCountArgs";
import { FeedbackTypeFindManyArgs } from "./FeedbackTypeFindManyArgs";
import { FeedbackTypeFindUniqueArgs } from "./FeedbackTypeFindUniqueArgs";
import { CreateFeedbackTypeArgs } from "./CreateFeedbackTypeArgs";
import { UpdateFeedbackTypeArgs } from "./UpdateFeedbackTypeArgs";
import { DeleteFeedbackTypeArgs } from "./DeleteFeedbackTypeArgs";
import { FeedbackTypeService } from "../feedbackType.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => FeedbackType)
export class FeedbackTypeResolverBase {
  constructor(
    protected readonly service: FeedbackTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "FeedbackType",
    action: "read",
    possession: "any",
  })
  async _feedbackTypesMeta(
    @graphql.Args() args: FeedbackTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [FeedbackType])
  @nestAccessControl.UseRoles({
    resource: "FeedbackType",
    action: "read",
    possession: "any",
  })
  async feedbackTypes(
    @graphql.Args() args: FeedbackTypeFindManyArgs
  ): Promise<FeedbackType[]> {
    return this.service.feedbackTypes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => FeedbackType, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "FeedbackType",
    action: "read",
    possession: "own",
  })
  async feedbackType(
    @graphql.Args() args: FeedbackTypeFindUniqueArgs
  ): Promise<FeedbackType | null> {
    const result = await this.service.feedbackType(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FeedbackType)
  @nestAccessControl.UseRoles({
    resource: "FeedbackType",
    action: "create",
    possession: "any",
  })
  async createFeedbackType(
    @graphql.Args() args: CreateFeedbackTypeArgs
  ): Promise<FeedbackType> {
    return await this.service.createFeedbackType({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FeedbackType)
  @nestAccessControl.UseRoles({
    resource: "FeedbackType",
    action: "update",
    possession: "any",
  })
  async updateFeedbackType(
    @graphql.Args() args: UpdateFeedbackTypeArgs
  ): Promise<FeedbackType | null> {
    try {
      return await this.service.updateFeedbackType({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FeedbackType)
  @nestAccessControl.UseRoles({
    resource: "FeedbackType",
    action: "delete",
    possession: "any",
  })
  async deleteFeedbackType(
    @graphql.Args() args: DeleteFeedbackTypeArgs
  ): Promise<FeedbackType | null> {
    try {
      return await this.service.deleteFeedbackType(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
